# —Ü–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# ùëì(ùë•1, ùë•2) = 2(ùë•1)^2 + 5(ùë•2)^2 + (ùë•1)(ùë•2) ‚àí 3(ùë•1) ‚àí (ùë•2)

from math import sqrt


e = 0.001   # —Ç–æ—á–Ω–æ—Å—Ç—å
a = 0.001   # —à–∞–≥
x1, x2 = 1, 1   # –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞


def f(x1, x2):
    '''—Ü–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è'''
    return 2*(x1^2) + 5*(x2^2) + (x1)*(x2) - 3*(x1) - (x2)

def df_dx1(x1, x2):
    '''–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –ø–æ –ø–µ—Ä–≤–æ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç—É'''
    return 4(x1) + (x2) - 3

def df_dx2(x1, x2):
    '''–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –ø–æ –≤—Ç–æ—Ä–æ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç—É'''
    return 10(x2) + (x1) - 1

def grad_slope():
    '''–º–µ—Ç–æ–¥ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞'''
    # —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
    while sqrt(df_dx1(x1, x2)^2 + df_dx2(x1, x2)^2) > e:
        z1 = x1 - a*(df_dx1(x1, x2))
        z2 = x2 - a*(df_dx2(x1, x2))
        fz = f(z1, z2)
        fx = f(x1, x2)
        if fz > fx:
            x1, x2 = z1, z2
        else:
            a = a/2
    
    # —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
    print(f'X*: {x1}; {x2}' \
          f'f*: {f(x1, x2)}')


